plot(pressure$pressure.pressure~pressure$pressure.temperature, pressure
xlabel = 'temperature', ylabel = 'pressure')
plot(pressure$pressure.pressure~pressure$pressure.temperature, pressure
xlab = 'temperature', ylab = 'pressure')
plot(pressure$pressure.pressure~pressure$pressure.temperature, pressure
xlab = "temperature", ylab = "pressure")
plot(pressure$pressure.pressure~pressure$pressure.temperature, pressure)
model <- lm(pressure$pressure.pressure ~ pressure$pressure.temperature, data = pressure)
abline(model)
W <- coef(model)[1]
b <- coef(model)[2]
dataset <- c(65,95,155)
result <- W * dataset + b
result
W <- coef(model)[1]
b <- coef(model)[2]
W
b
plot(pressure$pressure~pressure$temperature, pressure)
pressure <- data.frame(pressure$temperature, pressure$pressure)
head(pressure) #독립변수는 온도, 종속변수는 기압
pressure
model <- lm(pressure$pressure ~ pressure$temperature, data = pressure)
pressure
head(pressure) #독립변수는 온도, 종속변수는 기압
pressure
head(pressure) #독립변수는 온도, 종속변수는 기압
model <- lm(pressure$pressure ~ pressure$temperature, data = pressure)
model <- lm(pressure$pressure~pressure$temperature, data = pressure)
pressure.data <- c(pressure$pressure)
temperature.data <- c(pressure$temperature)
model <- lm(pressure.data ~ temperature.data, data = pressure)
abline(model)
plot(pressure.data ~ temperature.data, pressure)
plot(pressure.data ~ temperature.data, pressure)
W <- coef(model)[1]
b <- coef(model)[2]
W
b
dataset <- c(65,95,155)
result <- W * dataset + b
result
model <- lm(temperature.data ~ pressure.data, data = pressure)
abline(model)
p
model <- lm(pressure.data ~ temperature.data, data = pressure)
model <- lm(temperature.data ~ pressure.data, data = pressure)
abline(model)
plot(pressure.data ~ temperature.data, pressure)
W <- coef(model)[1]
b <- coef(model)[2]
W
b
dataset <- c(65,95,155)
result <- W * dataset + b
result
W <- coef(model)[1]
b <- coef(model)[2]
W
b
W
b
Loblolly
head(Loblolly)
Loblolly$height
age <- Loblolly$age
height <- Loblolly$height
plot(age~height, Loblolly)
plot(height, age, Loblolly)
plot(height~age, Loblolly)
model <- lm(height ~ age, data = Loblolly)
W <- coef(model)[2]
b <- coef(model)[1]
coef(model)[1]
coef(model)[2]
Loblolly$age
Loblolly
head(Loblolly)
coef(model)[1] #편향
coef(model)[2] #가중치
summary(model)
data1 <- c(10,15,20)
result1 <- W * data1 + b
result1
abline(model)
head(airquality)
plot(Temp~Wind, airquality)
model2 <- lm(Temp~wind, data = airquality)
model2 <- lm(Temp~wind, data = airquality)
model2 <- lm(Temp~Wind, data = airquality)
abline(model2)
W <- coef(model2)[2]
b <- coef(model2)[1]
dataset2 <- c(10,15,20)
result2 <- W * dataset2 + b
result2
coef(model2)[2]
coef(model2)[1]
head(pressure)
plot(pressure~temperature, pressure)
model3 <- lm(pressure~temperature, data = pressure)
abline(model3)
coef(model3)[2]
coef(model3)[1]
W <- coef(model3)[2]
b <- coef(model3)[1]
dataset3 <- c(65,95,155)
result3 <- W * dataset3 + b
result3
summary(model3)
result3 <- W * dataset3 + b
result3
state.x77
head(state.x77)
Illiteracy <- state.x77$Illiteracy
typeof(state.x77)
state.info <- data.frmae(state.x77)
state.info <- data.fra,me(state.x77)
state.info <- data.frame(state.x77)
plot()
typeof(state.info)
state.info
Illiteracy <- state.info$Illiteracy
HS.Grad <- state.info$HS.Grad
Income <- state.info$Income
info <- c(Illiteracy, HS.Grad, Income)
plot(info, pch = 16, col = "blue",
main = "Matrix Scatterplot")
library(mlbench)
data("PimaIndiansDiabetes")
library(mlbench)
data("PimaIndiansDiabetes")
set,seed(100)
set.seed(100)
PimaIndiansDiabetes
colnames(PimaIndiansDiabetes)
dataset <- PimaIndiansDiabetes
colnames(PimaIndiansDiabetes)
dataExtract(dataset, 60%, replace = T)
dataExtract<- sample(dataset, 60%, replace = T)
dataExtract<- sample(dataset, size = 60%, replace = T)
dataExtract<- sample(dataset, size = 5, replace = T)
dataExtract
dataset
dataExtract
dataset
dataset
colnames(dataExtract)
colnames(dataset)
ncol(dataset)
PimaIndiansDiabetes
ncol(PimaIndiansDiabetes)
PimaIndiansDiabetes
data("PimaIndiansDiabetes2")
PimaIndiansDiabetes2
ncol(PimaIndiansDiabetes2)
library(mlbench)
data("PimaIndiansDiabetes")
set.seed(100)
dataset <- PimaIndiansDiabetes
colnames(PimaIndiansDiabetes)
ncol(PimaIndiansDiabetes)
colnames(dataset)
ncol(dataset)
ncol(dataSet)
dataSet <- PimaIndiansDiabetes
colnames(dataSet)
ncol(dataSet)
library(mlbench)
data("PimaIndiansDiabetes")
set.seed(100)
dataSet <- PimaIndiansDiabetes
colnames(dataSet)
ncol(dataSet)
dataExtract<- sample(dataset, size = 5, replace = T)
dataExtract<- sample(dataSet, size = 5, replace = T)
dataExtract
colnames(dataSet)
ncol(dataSet)
colnames(dataSet)
ncol(dataSet)
dataSet <- PimaIndiansDiabetes
colnames(dataSet)
ncol(dataSet)
dataExtract<- sample(dataSet, size = 5, replace = T)
ncol(dataSet)
library(mlbench)
data("PimaIndiansDiabetes")
dataExtract<- sample(dataSet, size = 5, replace = T)
dataExtract
colnames(dataExtract)
colnames(dataset)
library(mlbench)
data("PimaIndiansDiabetes")
set.seed(100)
dataSet <- PimaIndiansDiabetes
colnames(dataSet)
ncol(dataSet)
dataExtract<- sample(dataSet, size = 10, replace = T)
dataExtract
nrow(dataSet)
nrow(dataExtract)
dataExtract<- sample(dataSet, size = 1, replace = T)
dataExtract
dataExtract
dataSet
colnames(dataExtract)
colnames(dataset)
ncol(dataset)
colnames(dataSet)
colnames(dataExtract)
dataExtract<- sample(dataSet, size = 3, replace = T)
dataExtract
colnames(dataExtract)
colnames(dataSet)
dataExtract<- sample(dataSet, size = 3, replace = F)
dataExtract
colnames(dataExtract)
dataExtract<- sample(1:nrow(dataSet), size = 3, replace = F)
dataExtract
dataExtract<- sample(1:nrow(dataSet), size = 60%, replace = F)
dataExtract<- sample(1:nrow(dataSet), size = 60, replace = F)
dataExtract
nrow(dataExtract)
dataExtract<- sample(dataSet, size = 60, replace = F)
dataExtract
dataExtract<- sample(dataSet, size = 60, replace = F)
dataExtract
dataSet
colnames(dataExtract)
colnames(dataSet)
library(mlbench)
data("PimaIndiansDiabetes")
set.seed(100)
dataSet <- PimaIndiansDiabetes
colnames(dataSet)
ncol(dataSet)
nrow(dataSet)
dataExtract<- sample(dataSet, size = 60, replace = F)
dataExtract<- sample(dataSet, size = 10, replace = F)
BostonHousing
mtcars
head(mtcars)
mtcars[sample(nrow(mtcars),10),]
head(BostonHousing)
library(mlbench)
data("BostonHousing")
head(BostonHousing)
BostonHousing
ncol(BostonHousing)
idx <- sample(nrow(BostonHousing),size = nrow(BostonHousing) * 0.6, replace = FALSE)
train <- BostonHousing[idx,]
test <- BostonHousing[-idx,]
train
nrow(train)
ncol(test)
nrow(test)
nrow(train)
nrow(test)
nrow(BostonHousing)
BostonHousing
colnames(BostonHousing)
library(mlbench)
data("PimaIndiansDiabetes")
colnames(PimaIndiansDiabetes)
ncol(PimaIndiansDiabetes)
set.seed(100)
dataSet <- PimaIndiansDiabetes
dataSet
idx <- sample(1:nrow(dataSet), size = nrow(dataSet)*0.6, replace = FALSE)
train <- data[idx,]
test <- data[-idx,]
typeof(dataSet)
typeof(dataSet$glucose)
typeof(dataSet$diabetes)
idx <- sample(1:nrow(dataSet), size = nrow(dataSet)*0.6, replace = FALSE)
idx
train <- dataSet[idx,]
test <- dataSet[-idx,]
train
nrow(train)
nrow(test)
nrow(dataSet)
glm(dataSet~., dataSet)
glm(diabetes~., dataSet)
colnames(dataSet)
colnames(dataSet)
glm(dataSet$diabetes~., dataSet)
glm(dataSet$diabetes ~., dataSet)
glm(diabetes ~., dataSet)
colnames(dataSet)
source("~/.active-rstudio-document", echo=TRUE)
glm(diabetes ~., dataSet)
colnames(dataSet)
glm(diabetes ~., dataSet)
colnames(dataSet)
model <- glm(diabetes ~., dataSet)
colnames(dataSet)
model <- glm(diabetes ~ pregnant, dataSet)
colnames(dataSet)
model <- glm(diabetes ~ pregnant, data = dataSet)
dataSet
dataSet$diabetes <- as.integer(dataSet$diabetes)
dataSet$diabetes
model <- glm(diabetes ~ pregnant, data = dataSet)
colnames(dataSet)
model <- glm(diabetes ~ ., data = dataSet)
colnames(dataSet)
summary(model)
summary(model)
PimaIndiansDiabetes[1,]
PimaIndiansDiabetes[1,1:5]
PimaIndiansDiabetes[1,1:6]
PimaIndiansDiabetes[1,1:8]
prediction <- predict(PimaIndiansDiabetes[1,8], model)
prediction <- predict(model, PimaIndiansDiabetes[1, 1:8])
prediction
PimaIndiansDiabetes[1, 9]
PimaIndiansDiabetes[1,1:9]
PimaIndiansDiabetes[2,1:9]
prediction2 <- predict(model, PimaIndiansDiabetes[2,1:8])
prediction2
mydata <- iris[,1:4]
fit <- kmeans(x = mydata, centers = 3)
fit
fit$cluster
fit$centers
library(cluster)
clusplot(mydata, fit$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0)
clusplot(mydata, fit$cluster, color = FALSE, shade = TRUE,
labels = 2, lines = 0)
clusplot(mydata, fit$cluster,
labels = 2, lines = 0)
clusplot(mydata, fit$cluster, color = TRUE, shade = TRUE
labels = 2, lines = 0)
clusplot(mydata, fit$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0)
clusplot(mydata, fit$cluster, color = TRUE,
labels = 2, lines = 0)
, shade = TRUE
clusplot(mydata, fit$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0)
library(MASS)
newdata2 <- Prestige[,c(1:5)]
newdata2 <- prestige[,c(1:5)]
library(MASS)
#package loading
library(tidyverse) #NA값 처리
library(readxl) #excel 파일 읽어오기
library(knitr) #데이터 표 형태로 출력하기
library(ggplot2) #데이터 시각화
library(MASS) #특성 선택을 위한 라이브러리
library(scales) #x축 눈금 표시 방식 정의
#environment set
setwd("D:/github_sub/project_1/project_code/R/used_data/개인별 기대 수명 데이터/기대 수명 정보 제공 데이터/중요 데이터")
#check directory
getwd()
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
plot(dataTotal_origin, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
var(dataTotal)
dataTotal
function(percentage){
changeUnit <- percentage * 1000
return(changeUnit)
}
changeUnit <- function(percentage){
changeUnit <- percentage * 1000
return(changeUnit)
}
dataTotal
dataTotal$smoke_rate <- changeUnit(dataTotal$smoke_rate)
dataTotal$exercise_rate <- changeUnit(dataTotal$exercise_rate)
dataTotal
plot(dataTotal, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
dataTotal_scale
dataTotal_scale <- dataTotal
plot(dataTotal_scale, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
death_rate_model <- lm(death_rate ~ ., data = dataTotal)
plot(dataTotal_scale, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
death_rate_model2 <- lm(death_ratet ~ ., data = dataTotal_scale)
death_rate_model2 <- lm(death_rate ~ ., data = dataTotal_scale)
summary(death_rate_model2)
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- unit * 100000
return(changeUnit)
}
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
dataTotal_scale <- dataTotal
dataTotal
plot(dataTotal_origin, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
var(dataTotal)
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- unit * 100000
return(changeUnit)
}
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- unit / 100000
return(changeUnit)
}
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- (unit / 100000) * 100
return(changeUnit)
}
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
death_rate_model2 <- lm(death_rate ~ ., data = dataTotal_scale)
summary(death_rate_model2)
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
plot(dataTotal_origin, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
death_rate_model <- lm(death_rate ~ ., data = dataTotal)
summary(death_rate_model)
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- (unit / 100000) * 100
return(changeUnit)
}
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
death_rate_model2 <- lm(death_rate ~ ., data = dataTotal_scale)
summary(death_rate_model2)
#정규화(흡연율)
dataTotal_scale$death_rate <- scale(dataTotal_scale$death_rate)
dataTotal_scale
death_rate_model3 <- lm(death_rate ~ ., data = dataTotal_scale)
summary(death_rate_model3)
death_rate_model3_step <- stepAIC(death_rate_model3)
summary(death_rate_model3_step)
summary(death_rate_model3)
summary(death_rate_model3_step)
summary(death_rate_model3_step)
dataTotal_scale
death_rate_model2 <- lm(remain_life_expectancy ~ ., data = dataTotal_scale)
summary(death_rate_model2)
#정규화(흡연율)
dataTotal_scale$death_rate <- scale(dataTotal_scale$death_rate)
dataTotal_scale
death_rate_model3 <- lm(remain_life_expectancy ~ ., data = dataTotal_scale)
summary(death_rate_model3)
death_rate_model3_step <- stepAIC(death_rate_model3)
summary(death_rate_model3_step)
summary(death_rate_model3)
summary(death_rate_model3_step)
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
dataTotal
death_rate_model <- lm(death_rate ~ ., data = dataTotal)
summary(death_rate_model)
#10만명당 -> 확률
changeUnit <- function(unit){
changeUnit <- (unit / 100000) * 100
return(changeUnit)
}
dataTotal_scale <- dataTotal
dataTotal_scale$death_rate <- changeUnit(dataTotal_scale$death_rate)
dataTotal_scale
death_rate_model2 <- lm(remain_life_expectancy ~ ., data = dataTotal_scale)
summary(death_rate_model2)
#정규화(음주율)
dataTotal_scale$drinking_rate <- scale(dataTotal_scale$drinking_rate)
dataTotal_scale
death_rate_model3 <- lm(remain_life_expectancy ~ ., data = dataTotal_scale)
summary(death_rate_model3)
death_rate_model3_step <- stepAIC(death_rate_model3)
summary(death_rate_model3_step)
#데이터 불러오기
dataTotal <- data.frame(read_excel("total_data.xlsx"))
dataTotal_origin <- dataTotal
dataTotal
plot(dataTotal_origin, pch = 16, col = "blue",
main = "기대 수명 데이터 상관관계 분석")
